name: Build for Android and iOS
run-name: >
  ${{ github.event.pull_request.title }} - ${{ github.workflow }} (#${{ github.run_number }}.${{ github.run_attempt }}) - ${{ github.event_name }} ${{ github.ref }} (from ${{ github.head_ref }} to ${{ github.base_ref }})
on:
  pull_request:
    branches: [ main, dev ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Prepare workspace files - keystore and key.properties
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEY_PROPERTIES_BASE64: ${{ secrets.KEY_PROPERTIES_BASE64 }}
        run: |
          echo $KEYSTORE_BASE64 | base64 --decode > "${{ github.workspace }}/android/app/key.jks"
          echo $KEY_PROPERTIES_BASE64 | base64 --decode > "${{ github.workspace }}/android/key.properties"
          echo "key.properties file: $(ls -l "${{ github.workspace }}/android/key.properties")"
          echo "key.jks file: $(ls -l "${{ github.workspace }}/android/app/key.jks")"
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'
      - run: flutter --version
      - run: flutter pub get
      - name: build the environment
        env:
          ANDROID_APP_ID: ${{ secrets.ANDROID_APP_ID }}
          ANDROID_BANNER_ID: ${{ secrets.ANDROID_BANNER_ID }}
          ANDROID_NATIVE_ID: ${{ secrets.ANDROID_NATIVE_ID }}
          IOS_APP_ID: ${{ secrets.IOS_APP_ID }}
          IOS_BANNER_ID: ${{ secrets.IOS_BANNER_ID }}
          IOS_NATIVE_ID: ${{ secrets.IOS_NATIVE_ID }}
          TEST_ADS: ${{ secrets.TEST_ADS }}
        run: dart tool/env.dart
      - name: Generate files (freezed, json_serializable)
        run: flutter pub run build_runner build --delete-conflicting-outputs
      - name: Generate translations
        run: |
          flutter pub global activate intl_utils && flutter pub global run intl_utils:generate
      - run: flutter test
      - run: flutter build appbundle --release
      - name: Upload app bundle
        uses: actions/upload-artifact@v3
        with:
          name: app-release-aab
          path: build/app/outputs/bundle/release/app-release.aab

  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: 'x64'
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'
      - run: flutter --version
      - run: flutter pub get
      - name: build the environment
        env:
          ANDROID_APP_ID: ${{ secrets.ANDROID_APP_ID }}
          ANDROID_BANNER_ID: ${{ secrets.ANDROID_BANNER_ID }}
          ANDROID_NATIVE_ID: ${{ secrets.ANDROID_NATIVE_ID }}
          IOS_APP_ID: ${{ secrets.IOS_APP_ID }}
          IOS_BANNER_ID: ${{ secrets.IOS_BANNER_ID }}
          IOS_NATIVE_ID: ${{ secrets.IOS_NATIVE_ID }}
          TEST_ADS: ${{ secrets.TEST_ADS }}
        run: dart tool/env.dart
      - name: Generate files (freezed, json_serializable)
        run: flutter pub run build_runner build --delete-conflicting-outputs
      - name: Generate translations
        run: |
          flutter pub global activate intl_utils && flutter pub global run intl_utils:generate
      - run: flutter test
      - run: flutter build ios --release --no-codesign
      - name: Upload ios app
        uses: actions/upload-artifact@v3
        with:
          name: app-release-ipa
          path: build/ios/iphoneos/Runner.app
